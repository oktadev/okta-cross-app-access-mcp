{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "2 - Review implementation of SSO using Passport",
  "steps": [
    {
      "title": "OIDC authentication flow",
      "file": "packages/agent0/src/server/controllers/oidc.ts",
      "description": "Review how we get the ID token for ID-JAG exchange using [Passport](https://www.passportjs.org/). The ID token comes from the OpenID Connect authentication flow handled by the [passport-openidconnect library](https://www.passportjs.org/packages/passport-openidconnect/).\n\nThe `createStrategy` function configures the passport-openidconnect strategy. The ID token is automatically obtained through the OIDC flow. This strategy is configured with Okta as the identity provider (IdP) using environment variables for client credentials. ",
      "selection": {
        "start": {
          "line": 130,
          "character": 1
        },
        "end": {
          "line": 143,
          "character": 5
        }
      }
    },
    {
      "title": "Passport verify callback",
      "file": "packages/agent0/src/server/controllers/oidc.ts",
      "description": "The passport-openidconnect strategy automatically passes the ID token to your verify callback. So the ID token comes from the successful OIDC authentication handled automatically by passport-openidconnect. It's the JSON Web Token (JWT) that contains the user's identity claims from the identity provider (Okta in this case).\n\nThe `verify` callback function extracts user information from the profile and processes the external ID to get the auth server org key and user ID. This is where the application receives the authenticated user's data and ID token from Okta. ",
      "selection": {
        "start": {
          "line": 49,
          "character": 1
        },
        "end": {
          "line": 58,
          "character": 45
        }
      }
    },
    {
      "title": "Recap: The complete SSO/OIDC flow",
      "description": "1. User starts login: /api/openid/start/user@example.com\n2. Redirect to Identity Provider (IdP): User redirected to Okta/OAuth server for authentication\n3. User authenticates: Enters credentials at IdP\n4. IdP callback: IdP redirects back to /api/openid/callback/ with authorization code\n5. Token exchange: passport-openidconnect exchanges authorization code for tokens (access token, ID token)\n6. Verify callback: Passport calls your verify() function with the ID token\n\nNow let's use ID token to call requestIdJwtAuthzGrant() in the next step."
    }
  ],
  "ref": "oktane-lab"
}